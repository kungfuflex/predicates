# Project Intelligence for pair-equality.wasm

## Code Patterns

### Storage Pattern
- Use StoragePointer::from_keyword("/key-name") for all persistent storage
- Follow the established naming convention for storage keys:
  - `/initialized` - Initialization guard

### Security Patterns
- Always call observe_initialization() in Initialize operation
- Use overflow_error() for all numeric operations to prevent overflow
- Validate incoming alkanes against specified parameters
- Ensure exactly two alkanes are present in the transaction

### Implementation Patterns
- Implement EqualityPredicate trait for standard predicate functionality
- Use AlkaneResponder trait for message dispatching
- Follow the alkane predicate format for consistency
- Implement validation functions with comprehensive error handling

## Opcode Standards
- 0: Initialize()
- 7: Filter(sequence_left, amount_left, sequence_right, amount_right)

## Critical Implementation Paths
1. Initialization sequence:
   - Call observe_initialization() to prevent multiple initializations

2. Filter operation:
   - Validate that exactly two alkanes are present
   - Check sequence numbers and amounts against specified parameters
   - Forward valid transactions or return error for invalid ones

## Project Preferences
- Use Rust 2021 edition
- Follow standard Rust naming conventions
- Use anyhow for error handling
- Implement comprehensive error messages
- Use checked arithmetic operations for all numeric calculations

## Known Challenges
- Ensuring proper initialization guard is in place
- Validating incoming alkanes correctly
- Preventing integer overflow vulnerabilities
- Maintaining compatibility with existing systems

## Tool Usage Patterns
- Use cargo for building and testing
- Compile to WebAssembly for deployment
- Use git for version control